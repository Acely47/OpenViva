//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Logic/inputActions_viva.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions_viva : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions_viva()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""inputActions_viva"",
    ""maps"": [
        {
            ""name"": ""Keyboard"",
            ""id"": ""eb459591-4014-468b-8cee-68a48cd78f73"",
            ""actions"": [
                {
                    ""name"": ""miniprofiler"",
                    ""type"": ""Button"",
                    ""id"": ""d839296e-6485-4f85-8646-6abe0065a4f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""81f0c277-c2b6-4fe2-87f6-cf24b562bb6e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""extendRight"",
                    ""type"": ""Button"",
                    ""id"": ""07bd9f8e-cd08-42d8-b2df-aa2716310bd8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""extendLeft"",
                    ""type"": ""Button"",
                    ""id"": ""440233d2-e56e-463d-99be-8e23bba0a3b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""wave"",
                    ""type"": ""Button"",
                    ""id"": ""dad4c442-1e0e-4c8f-b06e-4392ddd7e04f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""follow"",
                    ""type"": ""Button"",
                    ""id"": ""a6f37fa6-b8c2-4b6d-97a5-520d20239f53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""pauseButton"",
                    ""type"": ""Button"",
                    ""id"": ""129a5773-95ca-458a-9933-461d91e93a65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""keyboardAlt"",
                    ""type"": ""Button"",
                    ""id"": ""8d9a8e1c-0186-4840-b785-4b1d45c9be46"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""rightInteract"",
                    ""type"": ""Button"",
                    ""id"": ""1d6323e7-1a6f-448f-88f0-d726d9b06948"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""leftInteract"",
                    ""type"": ""Button"",
                    ""id"": ""cb20c011-5e2b-4e0d-a1e5-5b507c8a76e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""mouseVelocity"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d1c82cfb-895e-4756-86cb-2dd12e7d8fb6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""mousePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7d724695-8d56-4a17-a3e3-9b11a01fe9fa"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""crouch"",
                    ""type"": ""Button"",
                    ""id"": ""5594723d-bfd5-4c74-a507-bd20037de005"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""w"",
                    ""type"": ""Button"",
                    ""id"": ""154b3263-5503-4ad5-97ae-a1d670f64399"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""a"",
                    ""type"": ""Button"",
                    ""id"": ""79877d24-6410-4e62-b9cd-ce217371c73e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""s"",
                    ""type"": ""Button"",
                    ""id"": ""371d95be-9bf4-49cc-9133-331acd5884e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""d"",
                    ""type"": ""Button"",
                    ""id"": ""291b99e9-23cf-4f74-9f87-7c92343cf01a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""795be110-47fe-4754-892c-77c0cdf291ac"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1b82e536-12ab-48ee-9d14-8553f20eade4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""562bda70-779d-4fd6-9125-6fbf2a7ccec3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3a150b00-cbf9-47a4-95fb-4b0538168722"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d2ca818c-1d03-45bc-8e68-d076636f621a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0a46f3dc-d408-4419-b78a-a3bbf9a5679f"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""extendLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ed4bc1b-fa83-438e-9b6e-8c0523d566f4"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""wave"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6033d847-c899-4be4-9717-fa730ac4dd02"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""follow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c009b2a-ed3a-4557-a526-c793a9e560ea"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""extendRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49dc878c-6bae-4e2d-8fc6-22b4f35ceab3"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pauseButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb808b91-5e22-4e2a-b902-787b6f387fd3"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""keyboardAlt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f7e14871-e7cc-4eb1-af46-c4f5098b0412"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rightInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b54c15f6-4427-41ba-bed0-7399e2e6bad6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""leftInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""243891fa-c80c-4620-85b4-060ef95c274f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouseVelocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2b96229-72b9-4793-948f-02fd583e0698"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0aec2d5-106c-41e3-8b59-5b507f244731"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab4cabfa-f357-46da-b82e-d7ed7b1f78de"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""w"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a0330cb-a74d-4d76-854e-16c11c3efa10"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""s"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7a1e39c-774f-4e86-8537-87c0f69f04ad"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""d"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27b5204e-f398-4f43-bd6b-ff90bdfd3f89"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""a"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef68b29c-2d40-44dc-a29e-cddb6d33b711"",
                    ""path"": ""<Keyboard>/f8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""miniprofiler"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""VR Head"",
            ""id"": ""69ab58fa-272d-4ce6-a9d4-c243b222c671"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""24bcfad3-53f4-4360-b2b5-79ba7bb964d8"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""bd3f4fe9-47cb-4a45-9577-ad5ab43d6e62"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b23b46e2-f8fa-46af-a9b8-d2e7a9710040"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6081415-6cab-468f-b94c-181cf938746d"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""VR LeftHand"",
            ""id"": ""fa62b563-0233-4b28-a9f3-6855cee5f00b"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""b19cd505-84c3-4f56-bb15-8c20c12720e5"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""50bd0f97-0681-476d-b905-5848337aadcf"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""095864f2-f950-4d85-89cf-333a0fd66d74"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""eda8d354-ce57-488f-8f12-18b68c8476e6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""54650ae9-1e7c-404b-8f0d-6c9cffe1b6fd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""d5f797c4-47df-4581-a819-bcaa3f1a78eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grab"",
                    ""type"": ""Value"",
                    ""id"": ""291fb1bb-31d3-41e2-8cb7-e8e539a59f75"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""ddc19e3f-2853-400f-812c-46db3774d9d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""00ad63b0-b724-4823-90cc-768ca0fe0ee8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""8eb11994-7364-41b0-8653-625b78c812a7"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""8b28cd4f-dc5a-4f2e-a6b0-cd9ad597de37"",
                    ""path"": ""<XRController>{LeftHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""a4a27c96-6e58-4bda-83ee-21e88cc9220a"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""afb4ecb9-91a9-46f2-badf-d94954b75a28"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""20e56458-c509-4568-9e1f-6e3abf62cf79"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""6f8d1d89-9c28-4da9-b5e0-aa5bec103485"",
                    ""path"": ""<XRController>{LeftHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""6856ea9e-e1e5-48d5-8282-f51e4ca493ff"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""068be33d-c726-48c0-a67d-cb2ace194a14"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""42d84815-3791-4cc7-851f-17dbbd57b252"",
                    ""path"": ""<XRController>{LeftHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""160b5582-8582-4a23-9448-0b8825a2d702"",
                    ""path"": ""<XRController>{LeftHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3c47594-3f06-45bb-b05e-0dd4e7ad1a55"",
                    ""path"": ""<XRController>{LeftHand}/primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87321caf-21aa-49aa-8b42-28d8b33d4fe8"",
                    ""path"": ""<XRController>{LeftHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57af9df8-ba40-426f-8efa-4d7c4929ceed"",
                    ""path"": ""<XRController>{LeftHand}/primary2DAxisClick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""932153d9-aa83-4c23-9c4e-5d84985c6866"",
                    ""path"": ""<XRController>{LeftHand}/triggerButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d10e54fc-599b-4077-9180-7d837ccd64ee"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""VR RightHand"",
            ""id"": ""323774f6-5cf8-4eac-b974-11d66f32775e"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""7472329b-583a-4a87-823e-3b0dfba268fc"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""12b97adf-4d75-4e41-b19d-0ac2103094cb"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""4294d283-eef9-4138-92b8-3d13eec20033"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e9d83227-6c13-4cd2-8793-b35128dbf653"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""af03a2d5-d425-48d0-aae1-66b02c5962a9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""896cbec2-f65a-4095-99f1-b30dfdb4d7cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grab"",
                    ""type"": ""Value"",
                    ""id"": ""d1d27fad-5515-4612-98e3-8b812917db2d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""6c76cda0-5866-4dff-9160-503a6ef27cb6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""e671392c-a8d8-4152-8700-5837789c435d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""f72500a3-32d5-47de-a4a3-976338cd7ad3"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""13b61c76-d536-4900-b793-f98c0523dbc8"",
                    ""path"": ""<XRController>{RightHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""3362d623-3292-43ce-8455-cd0f2728de89"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""a7ee96a7-2eb3-4834-9597-d65948673145"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""f4853e1c-8efe-4fec-a460-38cb5b8da46c"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""f0a9d45d-b188-4242-8328-f3ea006e71fb"",
                    ""path"": ""<XRController>{RightHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""586151bf-9814-44d8-a8b0-9709cabb247f"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""820c0eff-cab6-4b82-978c-f28bbfecf8a5"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""135a6fef-7f76-40eb-834c-f4536455aa1c"",
                    ""path"": ""<XRController>{RightHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8dce0ce5-ad7a-4af9-898f-9b18b63a3d4b"",
                    ""path"": ""<XRController>{RightHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""abd6f3a8-d2fa-47a8-820a-9b2af870871f"",
                    ""path"": ""<XRController>{RightHand}/primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de2cabb8-b8d4-4ad2-908c-ffea46545d62"",
                    ""path"": ""<XRController>{RightHand}/primary2DAxisClick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e3273d2-d9d1-4415-8dbb-19fd05b2971e"",
                    ""path"": ""<XRController>{RightHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94f2e17d-c3e1-42cf-988b-c8931cf4dcbd"",
                    ""path"": ""<XRController>{RightHand}/triggerButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71d6699c-0f48-4df6-be79-1cb65bdd70b3"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_miniprofiler = m_Keyboard.FindAction("miniprofiler", throwIfNotFound: true);
        m_Keyboard_movement = m_Keyboard.FindAction("movement", throwIfNotFound: true);
        m_Keyboard_extendRight = m_Keyboard.FindAction("extendRight", throwIfNotFound: true);
        m_Keyboard_extendLeft = m_Keyboard.FindAction("extendLeft", throwIfNotFound: true);
        m_Keyboard_wave = m_Keyboard.FindAction("wave", throwIfNotFound: true);
        m_Keyboard_follow = m_Keyboard.FindAction("follow", throwIfNotFound: true);
        m_Keyboard_pauseButton = m_Keyboard.FindAction("pauseButton", throwIfNotFound: true);
        m_Keyboard_keyboardAlt = m_Keyboard.FindAction("keyboardAlt", throwIfNotFound: true);
        m_Keyboard_rightInteract = m_Keyboard.FindAction("rightInteract", throwIfNotFound: true);
        m_Keyboard_leftInteract = m_Keyboard.FindAction("leftInteract", throwIfNotFound: true);
        m_Keyboard_mouseVelocity = m_Keyboard.FindAction("mouseVelocity", throwIfNotFound: true);
        m_Keyboard_mousePosition = m_Keyboard.FindAction("mousePosition", throwIfNotFound: true);
        m_Keyboard_crouch = m_Keyboard.FindAction("crouch", throwIfNotFound: true);
        m_Keyboard_w = m_Keyboard.FindAction("w", throwIfNotFound: true);
        m_Keyboard_a = m_Keyboard.FindAction("a", throwIfNotFound: true);
        m_Keyboard_s = m_Keyboard.FindAction("s", throwIfNotFound: true);
        m_Keyboard_d = m_Keyboard.FindAction("d", throwIfNotFound: true);
        // VR Head
        m_VRHead = asset.FindActionMap("VR Head", throwIfNotFound: true);
        m_VRHead_Position = m_VRHead.FindAction("Position", throwIfNotFound: true);
        m_VRHead_Rotation = m_VRHead.FindAction("Rotation", throwIfNotFound: true);
        // VR LeftHand
        m_VRLeftHand = asset.FindActionMap("VR LeftHand", throwIfNotFound: true);
        m_VRLeftHand_Position = m_VRLeftHand.FindAction("Position", throwIfNotFound: true);
        m_VRLeftHand_Rotation = m_VRLeftHand.FindAction("Rotation", throwIfNotFound: true);
        m_VRLeftHand_TrackingState = m_VRLeftHand.FindAction("Tracking State", throwIfNotFound: true);
        m_VRLeftHand_HapticDevice = m_VRLeftHand.FindAction("Haptic Device", throwIfNotFound: true);
        m_VRLeftHand_Move = m_VRLeftHand.FindAction("Move", throwIfNotFound: true);
        m_VRLeftHand_Select = m_VRLeftHand.FindAction("Select", throwIfNotFound: true);
        m_VRLeftHand_Grab = m_VRLeftHand.FindAction("Grab", throwIfNotFound: true);
        m_VRLeftHand_Interact = m_VRLeftHand.FindAction("Interact", throwIfNotFound: true);
        m_VRLeftHand_Pause = m_VRLeftHand.FindAction("Pause", throwIfNotFound: true);
        // VR RightHand
        m_VRRightHand = asset.FindActionMap("VR RightHand", throwIfNotFound: true);
        m_VRRightHand_Position = m_VRRightHand.FindAction("Position", throwIfNotFound: true);
        m_VRRightHand_Rotation = m_VRRightHand.FindAction("Rotation", throwIfNotFound: true);
        m_VRRightHand_TrackingState = m_VRRightHand.FindAction("Tracking State", throwIfNotFound: true);
        m_VRRightHand_HapticDevice = m_VRRightHand.FindAction("Haptic Device", throwIfNotFound: true);
        m_VRRightHand_Move = m_VRRightHand.FindAction("Move", throwIfNotFound: true);
        m_VRRightHand_Select = m_VRRightHand.FindAction("Select", throwIfNotFound: true);
        m_VRRightHand_Grab = m_VRRightHand.FindAction("Grab", throwIfNotFound: true);
        m_VRRightHand_Interact = m_VRRightHand.FindAction("Interact", throwIfNotFound: true);
        m_VRRightHand_Pause = m_VRRightHand.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private IKeyboardActions m_KeyboardActionsCallbackInterface;
    private readonly InputAction m_Keyboard_miniprofiler;
    private readonly InputAction m_Keyboard_movement;
    private readonly InputAction m_Keyboard_extendRight;
    private readonly InputAction m_Keyboard_extendLeft;
    private readonly InputAction m_Keyboard_wave;
    private readonly InputAction m_Keyboard_follow;
    private readonly InputAction m_Keyboard_pauseButton;
    private readonly InputAction m_Keyboard_keyboardAlt;
    private readonly InputAction m_Keyboard_rightInteract;
    private readonly InputAction m_Keyboard_leftInteract;
    private readonly InputAction m_Keyboard_mouseVelocity;
    private readonly InputAction m_Keyboard_mousePosition;
    private readonly InputAction m_Keyboard_crouch;
    private readonly InputAction m_Keyboard_w;
    private readonly InputAction m_Keyboard_a;
    private readonly InputAction m_Keyboard_s;
    private readonly InputAction m_Keyboard_d;
    public struct KeyboardActions
    {
        private @InputActions_viva m_Wrapper;
        public KeyboardActions(@InputActions_viva wrapper) { m_Wrapper = wrapper; }
        public InputAction @miniprofiler => m_Wrapper.m_Keyboard_miniprofiler;
        public InputAction @movement => m_Wrapper.m_Keyboard_movement;
        public InputAction @extendRight => m_Wrapper.m_Keyboard_extendRight;
        public InputAction @extendLeft => m_Wrapper.m_Keyboard_extendLeft;
        public InputAction @wave => m_Wrapper.m_Keyboard_wave;
        public InputAction @follow => m_Wrapper.m_Keyboard_follow;
        public InputAction @pauseButton => m_Wrapper.m_Keyboard_pauseButton;
        public InputAction @keyboardAlt => m_Wrapper.m_Keyboard_keyboardAlt;
        public InputAction @rightInteract => m_Wrapper.m_Keyboard_rightInteract;
        public InputAction @leftInteract => m_Wrapper.m_Keyboard_leftInteract;
        public InputAction @mouseVelocity => m_Wrapper.m_Keyboard_mouseVelocity;
        public InputAction @mousePosition => m_Wrapper.m_Keyboard_mousePosition;
        public InputAction @crouch => m_Wrapper.m_Keyboard_crouch;
        public InputAction @w => m_Wrapper.m_Keyboard_w;
        public InputAction @a => m_Wrapper.m_Keyboard_a;
        public InputAction @s => m_Wrapper.m_Keyboard_s;
        public InputAction @d => m_Wrapper.m_Keyboard_d;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        public void SetCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterface != null)
            {
                @miniprofiler.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMiniprofiler;
                @miniprofiler.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMiniprofiler;
                @miniprofiler.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMiniprofiler;
                @movement.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMovement;
                @movement.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMovement;
                @movement.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMovement;
                @extendRight.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnExtendRight;
                @extendRight.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnExtendRight;
                @extendRight.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnExtendRight;
                @extendLeft.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnExtendLeft;
                @extendLeft.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnExtendLeft;
                @extendLeft.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnExtendLeft;
                @wave.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnWave;
                @wave.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnWave;
                @wave.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnWave;
                @follow.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnFollow;
                @follow.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnFollow;
                @follow.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnFollow;
                @pauseButton.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnPauseButton;
                @pauseButton.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnPauseButton;
                @pauseButton.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnPauseButton;
                @keyboardAlt.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnKeyboardAlt;
                @keyboardAlt.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnKeyboardAlt;
                @keyboardAlt.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnKeyboardAlt;
                @rightInteract.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRightInteract;
                @rightInteract.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRightInteract;
                @rightInteract.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRightInteract;
                @leftInteract.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnLeftInteract;
                @leftInteract.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnLeftInteract;
                @leftInteract.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnLeftInteract;
                @mouseVelocity.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMouseVelocity;
                @mouseVelocity.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMouseVelocity;
                @mouseVelocity.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMouseVelocity;
                @mousePosition.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMousePosition;
                @mousePosition.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMousePosition;
                @mousePosition.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMousePosition;
                @crouch.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnCrouch;
                @crouch.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnCrouch;
                @crouch.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnCrouch;
                @w.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnW;
                @w.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnW;
                @w.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnW;
                @a.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnA;
                @a.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnA;
                @a.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnA;
                @s.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnS;
                @s.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnS;
                @s.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnS;
                @d.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnD;
                @d.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnD;
                @d.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnD;
            }
            m_Wrapper.m_KeyboardActionsCallbackInterface = instance;
            if (instance != null)
            {
                @miniprofiler.started += instance.OnMiniprofiler;
                @miniprofiler.performed += instance.OnMiniprofiler;
                @miniprofiler.canceled += instance.OnMiniprofiler;
                @movement.started += instance.OnMovement;
                @movement.performed += instance.OnMovement;
                @movement.canceled += instance.OnMovement;
                @extendRight.started += instance.OnExtendRight;
                @extendRight.performed += instance.OnExtendRight;
                @extendRight.canceled += instance.OnExtendRight;
                @extendLeft.started += instance.OnExtendLeft;
                @extendLeft.performed += instance.OnExtendLeft;
                @extendLeft.canceled += instance.OnExtendLeft;
                @wave.started += instance.OnWave;
                @wave.performed += instance.OnWave;
                @wave.canceled += instance.OnWave;
                @follow.started += instance.OnFollow;
                @follow.performed += instance.OnFollow;
                @follow.canceled += instance.OnFollow;
                @pauseButton.started += instance.OnPauseButton;
                @pauseButton.performed += instance.OnPauseButton;
                @pauseButton.canceled += instance.OnPauseButton;
                @keyboardAlt.started += instance.OnKeyboardAlt;
                @keyboardAlt.performed += instance.OnKeyboardAlt;
                @keyboardAlt.canceled += instance.OnKeyboardAlt;
                @rightInteract.started += instance.OnRightInteract;
                @rightInteract.performed += instance.OnRightInteract;
                @rightInteract.canceled += instance.OnRightInteract;
                @leftInteract.started += instance.OnLeftInteract;
                @leftInteract.performed += instance.OnLeftInteract;
                @leftInteract.canceled += instance.OnLeftInteract;
                @mouseVelocity.started += instance.OnMouseVelocity;
                @mouseVelocity.performed += instance.OnMouseVelocity;
                @mouseVelocity.canceled += instance.OnMouseVelocity;
                @mousePosition.started += instance.OnMousePosition;
                @mousePosition.performed += instance.OnMousePosition;
                @mousePosition.canceled += instance.OnMousePosition;
                @crouch.started += instance.OnCrouch;
                @crouch.performed += instance.OnCrouch;
                @crouch.canceled += instance.OnCrouch;
                @w.started += instance.OnW;
                @w.performed += instance.OnW;
                @w.canceled += instance.OnW;
                @a.started += instance.OnA;
                @a.performed += instance.OnA;
                @a.canceled += instance.OnA;
                @s.started += instance.OnS;
                @s.performed += instance.OnS;
                @s.canceled += instance.OnS;
                @d.started += instance.OnD;
                @d.performed += instance.OnD;
                @d.canceled += instance.OnD;
            }
        }
    }
    public KeyboardActions @Keyboard => new KeyboardActions(this);

    // VR Head
    private readonly InputActionMap m_VRHead;
    private IVRHeadActions m_VRHeadActionsCallbackInterface;
    private readonly InputAction m_VRHead_Position;
    private readonly InputAction m_VRHead_Rotation;
    public struct VRHeadActions
    {
        private @InputActions_viva m_Wrapper;
        public VRHeadActions(@InputActions_viva wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_VRHead_Position;
        public InputAction @Rotation => m_Wrapper.m_VRHead_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_VRHead; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VRHeadActions set) { return set.Get(); }
        public void SetCallbacks(IVRHeadActions instance)
        {
            if (m_Wrapper.m_VRHeadActionsCallbackInterface != null)
            {
                @Position.started -= m_Wrapper.m_VRHeadActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_VRHeadActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_VRHeadActionsCallbackInterface.OnPosition;
                @Rotation.started -= m_Wrapper.m_VRHeadActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_VRHeadActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_VRHeadActionsCallbackInterface.OnRotation;
            }
            m_Wrapper.m_VRHeadActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
            }
        }
    }
    public VRHeadActions @VRHead => new VRHeadActions(this);

    // VR LeftHand
    private readonly InputActionMap m_VRLeftHand;
    private IVRLeftHandActions m_VRLeftHandActionsCallbackInterface;
    private readonly InputAction m_VRLeftHand_Position;
    private readonly InputAction m_VRLeftHand_Rotation;
    private readonly InputAction m_VRLeftHand_TrackingState;
    private readonly InputAction m_VRLeftHand_HapticDevice;
    private readonly InputAction m_VRLeftHand_Move;
    private readonly InputAction m_VRLeftHand_Select;
    private readonly InputAction m_VRLeftHand_Grab;
    private readonly InputAction m_VRLeftHand_Interact;
    private readonly InputAction m_VRLeftHand_Pause;
    public struct VRLeftHandActions
    {
        private @InputActions_viva m_Wrapper;
        public VRLeftHandActions(@InputActions_viva wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_VRLeftHand_Position;
        public InputAction @Rotation => m_Wrapper.m_VRLeftHand_Rotation;
        public InputAction @TrackingState => m_Wrapper.m_VRLeftHand_TrackingState;
        public InputAction @HapticDevice => m_Wrapper.m_VRLeftHand_HapticDevice;
        public InputAction @Move => m_Wrapper.m_VRLeftHand_Move;
        public InputAction @Select => m_Wrapper.m_VRLeftHand_Select;
        public InputAction @Grab => m_Wrapper.m_VRLeftHand_Grab;
        public InputAction @Interact => m_Wrapper.m_VRLeftHand_Interact;
        public InputAction @Pause => m_Wrapper.m_VRLeftHand_Pause;
        public InputActionMap Get() { return m_Wrapper.m_VRLeftHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VRLeftHandActions set) { return set.Get(); }
        public void SetCallbacks(IVRLeftHandActions instance)
        {
            if (m_Wrapper.m_VRLeftHandActionsCallbackInterface != null)
            {
                @Position.started -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnPosition;
                @Rotation.started -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnRotation;
                @TrackingState.started -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnTrackingState;
                @TrackingState.performed -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnTrackingState;
                @TrackingState.canceled -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnTrackingState;
                @HapticDevice.started -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnHapticDevice;
                @HapticDevice.performed -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnHapticDevice;
                @HapticDevice.canceled -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnHapticDevice;
                @Move.started -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnMove;
                @Select.started -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnSelect;
                @Grab.started -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnGrab;
                @Grab.performed -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnGrab;
                @Grab.canceled -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnGrab;
                @Interact.started -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnInteract;
                @Pause.started -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_VRLeftHandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @TrackingState.started += instance.OnTrackingState;
                @TrackingState.performed += instance.OnTrackingState;
                @TrackingState.canceled += instance.OnTrackingState;
                @HapticDevice.started += instance.OnHapticDevice;
                @HapticDevice.performed += instance.OnHapticDevice;
                @HapticDevice.canceled += instance.OnHapticDevice;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Grab.started += instance.OnGrab;
                @Grab.performed += instance.OnGrab;
                @Grab.canceled += instance.OnGrab;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public VRLeftHandActions @VRLeftHand => new VRLeftHandActions(this);

    // VR RightHand
    private readonly InputActionMap m_VRRightHand;
    private IVRRightHandActions m_VRRightHandActionsCallbackInterface;
    private readonly InputAction m_VRRightHand_Position;
    private readonly InputAction m_VRRightHand_Rotation;
    private readonly InputAction m_VRRightHand_TrackingState;
    private readonly InputAction m_VRRightHand_HapticDevice;
    private readonly InputAction m_VRRightHand_Move;
    private readonly InputAction m_VRRightHand_Select;
    private readonly InputAction m_VRRightHand_Grab;
    private readonly InputAction m_VRRightHand_Interact;
    private readonly InputAction m_VRRightHand_Pause;
    public struct VRRightHandActions
    {
        private @InputActions_viva m_Wrapper;
        public VRRightHandActions(@InputActions_viva wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_VRRightHand_Position;
        public InputAction @Rotation => m_Wrapper.m_VRRightHand_Rotation;
        public InputAction @TrackingState => m_Wrapper.m_VRRightHand_TrackingState;
        public InputAction @HapticDevice => m_Wrapper.m_VRRightHand_HapticDevice;
        public InputAction @Move => m_Wrapper.m_VRRightHand_Move;
        public InputAction @Select => m_Wrapper.m_VRRightHand_Select;
        public InputAction @Grab => m_Wrapper.m_VRRightHand_Grab;
        public InputAction @Interact => m_Wrapper.m_VRRightHand_Interact;
        public InputAction @Pause => m_Wrapper.m_VRRightHand_Pause;
        public InputActionMap Get() { return m_Wrapper.m_VRRightHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VRRightHandActions set) { return set.Get(); }
        public void SetCallbacks(IVRRightHandActions instance)
        {
            if (m_Wrapper.m_VRRightHandActionsCallbackInterface != null)
            {
                @Position.started -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnPosition;
                @Rotation.started -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnRotation;
                @TrackingState.started -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnTrackingState;
                @TrackingState.performed -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnTrackingState;
                @TrackingState.canceled -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnTrackingState;
                @HapticDevice.started -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnHapticDevice;
                @HapticDevice.performed -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnHapticDevice;
                @HapticDevice.canceled -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnHapticDevice;
                @Move.started -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnMove;
                @Select.started -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnSelect;
                @Grab.started -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnGrab;
                @Grab.performed -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnGrab;
                @Grab.canceled -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnGrab;
                @Interact.started -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnInteract;
                @Pause.started -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_VRRightHandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @TrackingState.started += instance.OnTrackingState;
                @TrackingState.performed += instance.OnTrackingState;
                @TrackingState.canceled += instance.OnTrackingState;
                @HapticDevice.started += instance.OnHapticDevice;
                @HapticDevice.performed += instance.OnHapticDevice;
                @HapticDevice.canceled += instance.OnHapticDevice;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Grab.started += instance.OnGrab;
                @Grab.performed += instance.OnGrab;
                @Grab.canceled += instance.OnGrab;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public VRRightHandActions @VRRightHand => new VRRightHandActions(this);
    public interface IKeyboardActions
    {
        void OnMiniprofiler(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnExtendRight(InputAction.CallbackContext context);
        void OnExtendLeft(InputAction.CallbackContext context);
        void OnWave(InputAction.CallbackContext context);
        void OnFollow(InputAction.CallbackContext context);
        void OnPauseButton(InputAction.CallbackContext context);
        void OnKeyboardAlt(InputAction.CallbackContext context);
        void OnRightInteract(InputAction.CallbackContext context);
        void OnLeftInteract(InputAction.CallbackContext context);
        void OnMouseVelocity(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnW(InputAction.CallbackContext context);
        void OnA(InputAction.CallbackContext context);
        void OnS(InputAction.CallbackContext context);
        void OnD(InputAction.CallbackContext context);
    }
    public interface IVRHeadActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
    public interface IVRLeftHandActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnTrackingState(InputAction.CallbackContext context);
        void OnHapticDevice(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnGrab(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IVRRightHandActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnTrackingState(InputAction.CallbackContext context);
        void OnHapticDevice(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnGrab(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
